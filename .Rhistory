pathScree<-file.path(getwd(),"functions","scree.R")
pathPattern<-file.path(getwd(),"functions","factor pattern.R")
colors<- c("darksalmon" ,"lightskyblue")
# solutions   [1]       [2]        [3]
solution<-c("eigen()", "svd()","principal()","factanal()")
whatsolution<- solution[3] #!!! Choose !!!#
#             uncorrelated factors <---||---> correlated factors
# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster")
whatrotation<-as.character(rotation[4]) #!!! Choose !!!#
nfactors<-12  #ncol(R)
# Principal Component Analysis
fit <- principal(r=data, nfactors=nfactors, rotate=whatrotation)
whatsolution
whatrotation
nfactors
fit # print results
# fit$values # eigenvalues
# fit$loadings # PC loadings
# str(fit)
# fit$communality
# fit$uniquenesses
# fit$Phi
ifelse(nfactors<ncol(R),
F<-cbind(fit$loadings[1:ncol(R),1:nfactors],empty[1:ncol(R),(nfactors+1):ncol(R)]),
F<- fit$loadings[1:ncol(R),1:nfactors]
)
F
# extract the parameter values from fitted object
eigens<-colSums(fit$loadings*fit$loadings) # eigenvalues
explained<-colSums(fit$loading*fit$loading)/dim(fit$loading)[1]  # variance explained
cumulative<-cumsum(colSums(fit$loading*fit$loading)/dim(fit$loading)[1]) # cummulative
# Create  D matrix with eigenvalues and thier informations
Dplus<-rbind(eigens,explained,cumulative)
pathImageOut<-file.path(getwd(),"hm6","SenseOfCommunity") # save files in...
pattern<-F   # matrix for the factor pattern
drawing<- "F"  # name of file with graph
title<- paste0("Pattern values from ",whatsolution," matrix:",drawing,"
rotation : ",whatrotation,", Factors = ",nfactors)
ylims<-c(0,3)           # (min,max) for eigenvalue plot
width<-5              # width of pattern in inches
height<-9             # height of pattern in inches
resolution<-200         # resolution of pattern
source(pathPattern) #produces the graph of pattern loadings
title2<- paste0("Scree plot from ", whatsolution,"
rotation : ", whatrotation, " Factors = ",nfactors)
title3<- paste0("Variance Explained from ",whatsolution,"
rotation : ",whatrotation,", Factors = ",nfactors)
width2<-3.3             # width of scree in pixels
height2<-2.5           # height of scree in pixels
resolution2<-200         # resolution of pattern
source(pathScree)
Fcor<-round(fit$Phi,4)
Fcor<-Fcor[order(rownames(Fcor)),order(colnames(Fcor))]
title4<-paste0("Correlation among ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Cor.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(Fcor,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title4)
dev.off()
title5<-paste0("Residuals for ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Res.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(fit$residual,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title5)
dev.off()
pattern
F
F<-F[order(rownames(F)),order(colnames(F))]
F
print(fit)
print(fit,order=TRUE)
print(fit,order=FALSE)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5) # adjust how scientific notation is displayed
library(Hmisc)
library(sem)
library(psych)
library(corrgram)
library(ggplot2)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
# create new dataset without missing data
data <-
read.csv('http://www.statpower.net/Content/312/Homework/LongPerkinsTime1SCI.csv')
### remove missing values
data <- na.omit(data)
head(data)
# Items 2,6,8,11  are worded negatively
# # recode negativaly worded questions so that  "2" - greater SOC, "1" - lesser SOC
# data$SCI2=ifelse( (data$SCI2 %in% c(2)),1,ifelse((data$SCI2 %in% c(1)),2,NA))
# data$SCI6=ifelse( (data$SCI6 %in% c(2)),1,ifelse((data$SCI6 %in% c(1)),2,NA))
# data$SCI8=ifelse( (data$SCI8 %in% c(2)),1,ifelse((data$SCI8 %in% c(1)),2,NA))
# data$SCI11=ifelse( (data$SCI11 %in% c(2)),1,ifelse((data$SCI11 %in% c(1)),2,NA))
# head(data) # Original dataset after recoding the negatively worded questions
# the names of the variables in the order they appear in the dataset
varnames<-c("goodlive","sharevalues","wantsame","iknow","feelhome","knowme",
"carethink","mypower", "solveprob","important","getalong","longlive")
# Create custom ordero of variable for later use:
varnames2<-c("SCI01","SCI02","SCI03","SCI04","SCI05","SCI06","SCI07","SCI08","SCI09","SCI10","SCI11","SCI12")
colnames(data)<-varnames2
R<-cor(data) # correlation matrix R of variables in AthleticsData
S<-cov(data) # covariance matrix S of variables in AthleticsData)
empty<-matrix(numeric(0),ncol(R),ncol(R))
rownames(empty)<-rownames(R)
colnames(empty)<-paste0("xC",1:ncol(R))
######   Producing graphs   # Ctrl+Alt+E - Run from line to end
pathScree<-file.path(getwd(),"functions","scree.R")
pathPattern<-file.path(getwd(),"functions","factor pattern.R")
colors<- c("darksalmon" ,"lightskyblue")
# solutions   [1]       [2]        [3]
solution<-c("eigen()", "svd()","principal()","factanal()")
whatsolution<- solution[3] #!!! Choose !!!#
#             uncorrelated factors <---||---> correlated factors
# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster")
whatrotation<-as.character(rotation[6]) #!!! Choose !!!#
nfactors<-12  #ncol(R)
# Principal Component Analysis
fit <- principal(r=data, nfactors=nfactors, rotate=whatrotation)
whatsolution
whatrotation
nfactors
fit # print results
# fit$values # eigenvalues
# fit$loadings # PC loadings
# str(fit)
# fit$communality
# fit$uniquenesses
# fit$Phi
ifelse(nfactors<ncol(R),
F<-cbind(fit$loadings[1:ncol(R),1:nfactors],empty[1:ncol(R),(nfactors+1):ncol(R)]),
F<- fit$loadings[1:ncol(R),1:nfactors]
)
F
F
F<-F[order(rownames(F)),order(colnames(F))]
F
colnames<-colnames(F)
colnames
substr(colnames[1,1],2)
substr(colnames[1,1],1,2)
substr(colnames[1,1],1,2)
colnames
colnames[1,1]
str(colnames)
colnames[,1]
colnames[]
colnames[1]
substr(colnames[1],1,2)
prefix<-substr(colnames[1],1,2)
prefix
colnames<-c(paste0(prefix,"01"), paste0(prefix,"02"))
colnames
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5) # adjust how scientific notation is displayed
library(Hmisc)
library(sem)
library(psych)
library(corrgram)
library(ggplot2)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
# create new dataset without missing data
data <-
read.csv('http://www.statpower.net/Content/312/Homework/LongPerkinsTime1SCI.csv')
### remove missing values
data <- na.omit(data)
head(data)
# Items 2,6,8,11  are worded negatively
# # recode negativaly worded questions so that  "2" - greater SOC, "1" - lesser SOC
# data$SCI2=ifelse( (data$SCI2 %in% c(2)),1,ifelse((data$SCI2 %in% c(1)),2,NA))
# data$SCI6=ifelse( (data$SCI6 %in% c(2)),1,ifelse((data$SCI6 %in% c(1)),2,NA))
# data$SCI8=ifelse( (data$SCI8 %in% c(2)),1,ifelse((data$SCI8 %in% c(1)),2,NA))
# data$SCI11=ifelse( (data$SCI11 %in% c(2)),1,ifelse((data$SCI11 %in% c(1)),2,NA))
# head(data) # Original dataset after recoding the negatively worded questions
# the names of the variables in the order they appear in the dataset
varnames<-c("goodlive","sharevalues","wantsame","iknow","feelhome","knowme",
"carethink","mypower", "solveprob","important","getalong","longlive")
# Create custom ordero of variable for later use:
varnames2<-c("SCI01","SCI02","SCI03","SCI04","SCI05","SCI06","SCI07","SCI08","SCI09","SCI10","SCI11","SCI12")
colnames(data)<-varnames2
R<-cor(data) # correlation matrix R of variables in AthleticsData
S<-cov(data) # covariance matrix S of variables in AthleticsData)
empty<-matrix(numeric(0),ncol(R),ncol(R))
rownames(empty)<-rownames(R)
colnames(empty)<-paste0("xC",1:ncol(R))
######   Producing graphs   # Ctrl+Alt+E - Run from line to end
pathScree<-file.path(getwd(),"functions","scree.R")
pathPattern<-file.path(getwd(),"functions","factor pattern.R")
colors<- c("darksalmon" ,"lightskyblue")
# solutions   [1]       [2]        [3]
solution<-c("eigen()", "svd()","principal()","factanal()")
whatsolution<- solution[3] #!!! Choose !!!#
#             uncorrelated factors <---||---> correlated factors
# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster")
whatrotation<-as.character(rotation[6]) #!!! Choose !!!#
nfactors<-12  #ncol(R)
# Principal Component Analysis
fit <- principal(r=data, nfactors=nfactors, rotate=whatrotation)
whatsolution
whatrotation
nfactors
fit # print results
# fit$values # eigenvalues
# fit$loadings # PC loadings
# str(fit)
# fit$communality
# fit$uniquenesses
# fit$Phi
ifelse(nfactors<ncol(R),
F<-cbind(fit$loadings[1:ncol(R),1:nfactors],empty[1:ncol(R),(nfactors+1):ncol(R)]),
F<- fit$loadings[1:ncol(R),1:nfactors]
)
F
# sort the rows and columns of the pattern matrix
F<-F[order(rownames(F)),order(colnames(F))]
# extract the parameter values from fitted object
eigens<-colSums(fit$loadings*fit$loadings) # eigenvalues
explained<-colSums(fit$loading*fit$loading)/dim(fit$loading)[1]  # variance explained
cumulative<-cumsum(colSums(fit$loading*fit$loading)/dim(fit$loading)[1]) # cummulative
# Create  D matrix with eigenvalues and thier informations
Dplus<-rbind(eigens,explained,cumulative)
pathImageOut<-file.path(getwd(),"hm6","SenseOfCommunity") # save files in...
pattern<-F   # matrix for the factor pattern
drawing<- "F"  # name of file with graph
title<- paste0("Pattern values from ",whatsolution," matrix:",drawing,"
rotation : ",whatrotation,", Factors = ",nfactors)
ylims<-c(0,3)           # (min,max) for eigenvalue plot
width<-5              # width of pattern in inches
height<-9             # height of pattern in inches
resolution<-200         # resolution of pattern
source(pathPattern) #produces the graph of pattern loadings
title2<- paste0("Scree plot from ", whatsolution,"
rotation : ", whatrotation, " Factors = ",nfactors)
title3<- paste0("Variance Explained from ",whatsolution,"
rotation : ",whatrotation,", Factors = ",nfactors)
width2<-3.3             # width of scree in pixels
height2<-2.5           # height of scree in pixels
resolution2<-200         # resolution of pattern
source(pathScree)
Fcor<-round(fit$Phi,4)
Fcor<-Fcor[order(rownames(Fcor)),order(colnames(Fcor))]
title4<-paste0("Correlation among ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Cor.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(Fcor,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title4)
dev.off()
title5<-paste0("Residuals for ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Res.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(fit$residual,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title5)
dev.off()
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5) # adjust how scientific notation is displayed
library(Hmisc)
library(sem)
library(psych)
library(corrgram)
library(ggplot2)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
# create new dataset without missing data
data <-
read.csv('http://www.statpower.net/Content/312/Homework/LongPerkinsTime1SCI.csv')
### remove missing values
data <- na.omit(data)
head(data)
# Items 2,6,8,11  are worded negatively
# # recode negativaly worded questions so that  "2" - greater SOC, "1" - lesser SOC
# data$SCI2=ifelse( (data$SCI2 %in% c(2)),1,ifelse((data$SCI2 %in% c(1)),2,NA))
# data$SCI6=ifelse( (data$SCI6 %in% c(2)),1,ifelse((data$SCI6 %in% c(1)),2,NA))
# data$SCI8=ifelse( (data$SCI8 %in% c(2)),1,ifelse((data$SCI8 %in% c(1)),2,NA))
# data$SCI11=ifelse( (data$SCI11 %in% c(2)),1,ifelse((data$SCI11 %in% c(1)),2,NA))
# head(data) # Original dataset after recoding the negatively worded questions
# the names of the variables in the order they appear in the dataset
varnames<-c("goodlive","sharevalues","wantsame","iknow","feelhome","knowme",
"carethink","mypower", "solveprob","important","getalong","longlive")
# Create custom ordero of variable for later use:
varnames2<-c("SCI01","SCI02","SCI03","SCI04","SCI05","SCI06","SCI07","SCI08","SCI09","SCI10","SCI11","SCI12")
colnames(data)<-varnames2
R<-cor(data) # correlation matrix R of variables in AthleticsData
S<-cov(data) # covariance matrix S of variables in AthleticsData)
empty<-matrix(numeric(0),ncol(R),ncol(R))
rownames(empty)<-rownames(R)
colnames(empty)<-paste0("xC",1:ncol(R))
######   Producing graphs   # Ctrl+Alt+E - Run from line to end
pathScree<-file.path(getwd(),"functions","scree.R")
pathPattern<-file.path(getwd(),"functions","factor pattern.R")
colors<- c("darksalmon" ,"lightskyblue")
# solutions   [1]       [2]        [3]
solution<-c("eigen()", "svd()","principal()","factanal()")
whatsolution<- solution[3] #!!! Choose !!!#
#             uncorrelated factors <---||---> correlated factors
# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster")
whatrotation<-as.character(rotation[6]) #!!! Choose !!!#
nfactors<-12  #ncol(R)
# Principal Component Analysis
fit <- principal(r=data, nfactors=nfactors, rotate=whatrotation)
whatsolution
whatrotation
nfactors
fit # print results
# fit$values # eigenvalues
# fit$loadings # PC loadings
# str(fit)
# fit$communality
# fit$uniquenesses
# fit$Phi
ifelse(nfactors<ncol(R),
F<-cbind(fit$loadings[1:ncol(R),1:nfactors],empty[1:ncol(R),(nfactors+1):ncol(R)]),
F<- fit$loadings[1:ncol(R),1:nfactors]
)
F
# sort the rows and columns of the pattern matrix
# F<-F[order(rownames(F)),order(colnames(F))]
# extract the parameter values from fitted object
eigens<-colSums(fit$loadings*fit$loadings) # eigenvalues
explained<-colSums(fit$loading*fit$loading)/dim(fit$loading)[1]  # variance explained
cumulative<-cumsum(colSums(fit$loading*fit$loading)/dim(fit$loading)[1]) # cummulative
# Create  D matrix with eigenvalues and thier informations
Dplus<-rbind(eigens,explained,cumulative)
pathImageOut<-file.path(getwd(),"hm6","SenseOfCommunity") # save files in...
pattern<-F   # matrix for the factor pattern
drawing<- "F"  # name of file with graph
title<- paste0("Pattern values from ",whatsolution," matrix:",drawing,"
rotation : ",whatrotation,", Factors = ",nfactors)
ylims<-c(0,3)           # (min,max) for eigenvalue plot
width<-5              # width of pattern in inches
height<-9             # height of pattern in inches
resolution<-200         # resolution of pattern
source(pathPattern) #produces the graph of pattern loadings
title2<- paste0("Scree plot from ", whatsolution,"
rotation : ", whatrotation, " Factors = ",nfactors)
title3<- paste0("Variance Explained from ",whatsolution,"
rotation : ",whatrotation,", Factors = ",nfactors)
width2<-3.3             # width of scree in pixels
height2<-2.5           # height of scree in pixels
resolution2<-200         # resolution of pattern
source(pathScree)
Fcor<-round(fit$Phi,4)
Fcor<-Fcor[order(rownames(Fcor)),order(colnames(Fcor))]
title4<-paste0("Correlation among ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Cor.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(Fcor,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title4)
dev.off()
title5<-paste0("Residuals for ",nfactors," factors"," in ",whatrotation," rotation")
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Res.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=200)
corrgram(fit$residual,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title5)
dev.off()
a.fit<-QuickCFA(cor(ds),n.factors=1,n.obs=nrow(ds),
model.name="pureCFA",
factor.names=nF1,
cutoff=.30,
factor.correlations=FALSE,
reference.indicators=FALSE)
summary(a.fit)
a1pat<-GetPattern(a.fit)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5) # adjust how scientific notation is displayed
library(Hmisc)
library(sem)
library(psych)
library(corrgram)
library(ggplot2)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
# create new dataset without missing data
data <-
read.csv('http://www.statpower.net/Content/312/Homework/LongPerkinsTime1SCI.csv')
### remove missing values
data <- na.omit(data)
head(data)
# Items 2,6,8,11  are worded negatively
# # recode negativaly worded questions so that  "2" - greater SOC, "1" - lesser SOC
# data$SCI2=ifelse( (data$SCI2 %in% c(2)),1,ifelse((data$SCI2 %in% c(1)),2,NA))
# data$SCI6=ifelse( (data$SCI6 %in% c(2)),1,ifelse((data$SCI6 %in% c(1)),2,NA))
# data$SCI8=ifelse( (data$SCI8 %in% c(2)),1,ifelse((data$SCI8 %in% c(1)),2,NA))
# data$SCI11=ifelse( (data$SCI11 %in% c(2)),1,ifelse((data$SCI11 %in% c(1)),2,NA))
# head(data) # Original dataset after recoding the negatively worded questions
# dm<-as.matrix(data)
# dm1<-matrix( rep(1,times=nrow(dm)*ncol(dm)),nrow(dm),ncol(dm))
# dm<-dm-dm1 # recoding so that answers are in 0/1
# ds<-as.data.frame(dm)
# ds<-as.data.frame(data) # [1] - mostly agree, [0] - mostly disagree
# head(ds)                # [1] - indicates greater Sense Of Community (SOC)
# ds$goodlive=ds$SCI1     # I think my block is a good place for me to live.
# ds$sharevalues=ds$SCI2  # People on this block do not share the same values. (reversed)
# ds$wantsame=ds$SCI3     # My neighbors and I want the same things from the block.
# ds$iknow=ds$SCI4        # I can recognize most of the people who live on my block.
# ds$feelhome=ds$SCI5     # I feel at home on this block.
# ds$knowme=ds$SCI6       # Very few of my neighbors know me. (reverse)
# ds$carethink=ds$SCI7    # I care about what my neighbors think of my actions.
# ds$mypower=ds$SCI8      # I have almost no influence over what this block is like. (reversed)
# ds$solveprob=ds$SCI9    # If there is a problem on this block people who live here can get it solved.
# ds$important=ds$SCI10   # It is very important to me to live on this particular block.
# ds$getalong=ds$SCI11    # People on this block generally don't get along with each other. (reversed)
# ds$longlive=ds$SCI12    # I expect to live on this block for a long time.
# head(ds) # Dataset wtih renamed variables
# rm(list=c("data","dm1","dm"))
# the names of the variables in the order they appear in the dataset
varnames<-c("goodlive","sharevalues","wantsame","iknow","feelhome","knowme",
"carethink","mypower", "solveprob","important","getalong","longlive")
# Create custom ordero of variable for later use:
varnames2<-c("SCI01","SCI02","SCI03","SCI04","SCI05","SCI06","SCI07","SCI08","SCI09","SCI10","SCI11","SCI12")
colnames(data)<-varnames2
R<-cor(data) # correlation matrix R of variables in AthleticsData
S<-cov(data) # covariance matrix S of variables in AthleticsData)
R
S
empty<-matrix(numeric(0),ncol(R),ncol(R))
rownames(empty)<-rownames(R)
colnames(empty)<-paste0("xC",1:ncol(R))
empty
title<-paste0("Correlation among 12 SOC measures")
pathFileOut<-file.path(pathImageOut,paste0("Correlation.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=400)
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title4)
dev.off()
title<-paste0("Correlation among 12 SOC measures")
pathFileOut<-file.path(pathImageOut,paste0("Correlation.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=400)
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title)
dev.off()
pathImageOut<-file.path(getwd(),"hm6") # save files in...
pathImageOut<-file.path(getwd(),"hm6") # save files in...
title<-paste0("Correlation among 12 SOC measures")
pathFileOut<-file.path(pathImageOut,paste0("Correlation.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=400)
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title)
dev.off()
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5) # adjust how scientific notation is displayed
library(Hmisc)
library(sem)
library(psych)
library(corrgram)
library(ggplot2)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
# create new dataset without missing data
data <-
read.csv('http://www.statpower.net/Content/312/Homework/LongPerkinsTime1SCI.csv')
### remove missing values
data <- na.omit(data)
head(data)
# Items 2,6,8,11  are worded negatively
# # recode negativaly worded questions so that  "2" - greater SOC, "1" - lesser SOC
data$SCI2=ifelse( (data$SCI2 %in% c(2)),1,ifelse((data$SCI2 %in% c(1)),2,NA))
data$SCI6=ifelse( (data$SCI6 %in% c(2)),1,ifelse((data$SCI6 %in% c(1)),2,NA))
data$SCI8=ifelse( (data$SCI8 %in% c(2)),1,ifelse((data$SCI8 %in% c(1)),2,NA))
data$SCI11=ifelse( (data$SCI11 %in% c(2)),1,ifelse((data$SCI11 %in% c(1)),2,NA))
# head(data) # Original dataset after recoding the negatively worded questions
# dm<-as.matrix(data)
# dm1<-matrix( rep(1,times=nrow(dm)*ncol(dm)),nrow(dm),ncol(dm))
# dm<-dm-dm1 # recoding so that answers are in 0/1
# ds<-as.data.frame(dm)
# ds<-as.data.frame(data) # [1] - mostly agree, [0] - mostly disagree
# head(ds)                # [1] - indicates greater Sense Of Community (SOC)
# ds$goodlive=ds$SCI1     # I think my block is a good place for me to live.
# ds$sharevalues=ds$SCI2  # People on this block do not share the same values. (reversed)
# ds$wantsame=ds$SCI3     # My neighbors and I want the same things from the block.
# ds$iknow=ds$SCI4        # I can recognize most of the people who live on my block.
# ds$feelhome=ds$SCI5     # I feel at home on this block.
# ds$knowme=ds$SCI6       # Very few of my neighbors know me. (reverse)
# ds$carethink=ds$SCI7    # I care about what my neighbors think of my actions.
# ds$mypower=ds$SCI8      # I have almost no influence over what this block is like. (reversed)
# ds$solveprob=ds$SCI9    # If there is a problem on this block people who live here can get it solved.
# ds$important=ds$SCI10   # It is very important to me to live on this particular block.
# ds$getalong=ds$SCI11    # People on this block generally don't get along with each other. (reversed)
# ds$longlive=ds$SCI12    # I expect to live on this block for a long time.
# head(ds) # Dataset wtih renamed variables
# rm(list=c("data","dm1","dm"))
# the names of the variables in the order they appear in the dataset
varnames<-c("goodlive","sharevalues","wantsame","iknow","feelhome","knowme",
"carethink","mypower", "solveprob","important","getalong","longlive")
# Create custom ordero of variable for later use:
varnames2<-c("SCI01","SCI02","SCI03","SCI04","SCI05","SCI06","SCI07","SCI08","SCI09","SCI10","SCI11","SCI12")
colnames(data)<-varnames2
R<-cor(data) # correlation matrix R of variables in AthleticsData
S<-cov(data) # covariance matrix S of variables in AthleticsData)
empty<-matrix(numeric(0),ncol(R),ncol(R))
rownames(empty)<-rownames(R)
colnames(empty)<-paste0("xC",1:ncol(R))
pathImageOut<-file.path(getwd(),"hm6") # save files in...
title<-paste0("Correlation among 12 SOC measures")
pathFileOut<-file.path(pathImageOut,paste0("Correlation.png"))
png(filename = pathFileOut, width =5, height =5 , units = "in", res=400)
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie,type="cor",order=FALSE,
main=title)
dev.off()
